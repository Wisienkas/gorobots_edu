/*
 * PositionControllingVMM.h
 *
 *  Created on: 13.11.2014
 *      Author: Johannes Widenka
 */

#ifndef POSITIONCONTROLLINGVMM_H_
#define POSITIONCONTROLLINGVMM_H_

#include "abstractmusclemodel.h"
/**
 * This class is able to apply the VAAM to controllers, designed for servo motors.
 * It uses the Runge-Kutta method, to integrate the muscle models torque calculation to
 * output a target position for the joint at call of getSignal( .. )
 */
class PositionControllingVMM: public AbstractMuscleModel {
public:
	/**
	 * standart constructor generating default values for the pre*** variables, holding the state of the
	 * muscle model of the last step.
	 * @param config the muscle models configuration, described in abstractMuscleModel.h
	 */
	PositionControllingVMM(MuscleModelConfiguration &config):AbstractMuscleModel(config){
		preAngle = 0;
		preSpeed = 0;
		preExforce = 0;
		preMusclAct = 0;
		preDisVec = 0;
	}
protected:
	/**
	 * The output function of the signal calculation as called by getSignal( .. ). This is the function defining the muscles
	 * models behavior specialized on position controlling controllers. It assumes a position value as the muscles activity
	 * and outputs a new position value.
	 * @param muscleAct original target position, unmodified by VAAM
	 * @param exForce the external force, loaded on the joint
	 * @param angleToCenter the rotational difference in radian to the center position of the muscle model
	 * @param angleToGround the rotational difference of the joints position compared to directly pointing to the ground ()
	 * @param aSpeed speed of rotation
	 * @param K the stiffness parameter of the muscles
	 * @param D the damping parameter of the muscles
	 * @param DisVec the displacement vector used for external force calculation besides the local displacement generated by length and current ground angle
	 * @return target position for servo motor control, modified by muscle models properties.
	 */
	double getOutput(double muscleAct, double exForce, double angleToCenter, double angleToGround, double aSpeed, double K, double D, double DisVec );
private:
	double preDisVec;
	double preAngle;
	double preSpeed;
	double preExforce;
	double preMusclAct;
};

#endif /* POSITIONCONTROLLINGVMM_H_ */
